@page "/main"
@inject MessageApiService MessageService
@inject UserApiService UserService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@using MessengerClient.Services;
@using MessengerClient.Models;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;


<div class="layout">
    <!-- sidebar with top links + chats + user profile -->
    <div class="sidebar">
        <div class="sidebar-top">
            <button class="sidebar-btn"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" 
                stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-book-user-icon lucide-book-user"><path
                    d="M15 13a3 3 0 1 0-6 0" /><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20" /><circle cx="12" cy="8" 
                        r="2" /></svg>Friends</button>
            <button class="sidebar-btn"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" 
                stroke-linejoin="round" class="lucide lucide-settings-icon lucide-settings"><path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1
                1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 
                0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z" /><circle cx="12" cy="12" r="3" /></svg>
                Settings</button>
        </div>

        <div class="chat-list">
            <div class="new-chat-block">
                <input @bind="searchTag" placeholder="User Tag.." class="form-control" />
                <div class="chat-actions">
                    <button @onclick="SearchUser">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                        stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-search-icon lucide-search"><path d="m21 21-4.34-4.34" /><circle cx="11" cy="11" r="8" /></svg>
                    </button>
                    <button @onclick="CreateChatWithFoundUser" disabled="@(!canCreate)">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" 
                        stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-message-circle-heart-icon lucide-message-circle-heart"><path d="M7.9 20A9 9 0 1 0 4 16.1L2 22Z" /><
                            path d="M15.8 9.2a2.5 2.5 0 0 0-3.5 0l-.3.4-.35-.3a2.42 2.42 0 1 0-3.2 3.6l3.6 3.5 3.6-3.5c1.2-1.2 1.1-2.7.2-3.7" /></svg>
                    </button>
                </div>
            </div>

            @if (foundUser != null)
            {
                <div class="found-user-preview">
                    <img src="@foundUser.ProfileImageUrl" class="avatar" alt="avatar" />
                    <strong>@foundUser.Username</strong>
                    @if (!string.IsNullOrEmpty(foundUser.UserTag))
                    {
                        <span>(@foundUser.UserTag)</span>
                    }   
                    <p>@foundUser.Bio</p>
                </div>
            }

            <h3 class="chat-section-title">Chats</h3>
            @if (chats == null)
            {
                <p>Loading..</p>
            }
            else if (!chats.Any())
            {
                <p>No chats yet</p>
            }
            else
            {
                @foreach (var chat in chats)
                {
                    <div class="chat-item @(chat.Id == selectedChatId ? "selected" : "")"
                    @onclick="() => SelectChat(chat.Id)">
                        @GetChatDisplayName(chat)
                    </div>
                }
            }
        </div>

        <div class="sidebar-bottom">
            <div class="sidebar-bottom-content">
                <div class="user-info">
                    <img src="@currentUser?.ProfileImageUrl" class="avatar" alt="avatar" />
                    <div>
                        <strong>@currentUser?.Username</strong>
                        @if (!string.IsNullOrEmpty(currentUser?.UserTag))
                        {
                            <div>@currentUser?.UserTag</div>
                        }
                    </div>
                    <button class="edit-profile">
                        <i class="bi bi-pencil-square"></i>
                    </button>
                </div>

                @if (!isLogoutPending)
                {
                    <button class="logout-btn" @onclick="() => isLogoutPending = true" title="Log out">
                        <svg xmlns="http://www.w3.org/2000/svg" class="logout-icon" fill="none" viewBox="0 0 24 24"
                             stroke-width="1.5" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round"
                                  d="M8.25 9V5.25A2.25 2.25 0 0 1 10.5 3h6a2.25 2.25 0 0 1 2.25 2.25v13.5A2.25 2.25 0 0 1 16.5 21h-6a2.25 2.25 0 0 1-2.25-2.25V15m-3 0-3-3m0 0 3-3m-3 3H15" />
                        </svg>
                    </button>

                }
                else
                {
                    <div class="confirm-popup-inline logout-confirm">
                        <span>Log out?</span>
                        <button @onclick="ConfirmLogout">Yes</button>
                        <button @onclick="() => isLogoutPending = false">No</button>
                    </div>
                }
            </div>
        </div>

    </div>

    <!-- chat content -->
    @{
        var selectedChat = GetSelectedChat();
    }
    <div class="chat-content">
        @if (selectedChatId == null)
        {
            <div class="welcome-message">
                <h2>Welcome back 🐾</h2>
                <p>Select a chat to start messaging</p>
                <i class="bi bi-chat-dots"></i>
            </div>
        }
        else if (messages == null)
        {
            <p>Loading messages..</p>
        }
        else
        {   
            @if (selectedChat != null)
            {
                <div class="chat-header">
                    <img src="@GetChatCompanion(selectedChat)?.ProfileImageUrl" class="avatar-small"/>
                    <strong>@GetChatDisplayName(selectedChat)</strong>
                </div>
            }

            <div class="message-list" @ref="messageListRef">
                @foreach (var msg in messages)
                {
                    var isMine = msg.SenderId ==  CurrentUserId;
                    <div class="message-container @(isMine ? "mine" : "theirs")">
                        <div class="message-bubble">
                            <div class="message-header">
                                <span class="sender">@msg.SenderName</span>

                                @if (isMine)
                                {
                                    <div class="message-actions">
                                        @if (messageIdPendingEdit != msg.Id)
                                        {
                                            <button @onclick="() => StartUpdate(msg.Id, msg.Content)" title="Edit" class="icon-button">
                                                <i class="bi bi-pencil-fill"></i>
                                            </button>

                                            @if (messageIdPendingDelete != msg.Id)
                                            {
                                                <button @onclick="() => AskDelete(msg.Id)" title="Delete" class="icon-button">
                                                    <i class="bi bi-trash3-fill"></i>
                                                </button>
                                            }
                                        }
                                    </div>
                                }
                            </div>

                            <div class="text">
                                @if (isMine && messageIdPendingEdit == msg.Id)
                                {
                                    <input @bind="updatedMessageContent" class="form-control editing" />
                                    <div class="edit-actions">
                                        <button @onclick="() => ConfirmUpdate(msg.Id)">
                                            <i class="bi bi-floppy-fill"></i>
                                        </button>
                                        <button @onclick="CancelUpdate">
                                            <i class="bi bi-x-lg"></i>
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    @msg.Content
                                }
                            </div>

                            @if (isMine && messageIdPendingDelete == msg.Id)
                            {
                                <div class="confirm-popup-inline">
                                    <span>Delete?</span>
                                    <button @onclick="() => ConfirmDelete(msg.Id)">Yes</button>
                                    <button @onclick="CancelDelete">No</button>
                                </div>
                            }
                        </div>
                    </div>


                }
            </div>

            <div class="send-message-box">
                <input @bind="newMessageContent" placeholder="Type a message.." class="form-control" />
                <button class="send-btn" @onclick="SendMessage">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5" />
                    </svg>

                </button>
            </div>
        }
    </div>
</div>



@code {
    private List<ChatDTO>? chats;
    private List<MessageDTO> messages;
    private int? selectedChatId;
    private int userId;
    private string searchTag = "";
    private FoundUserDTO? foundUser;
    private FoundUserDTO? currentUser;
    private bool canCreate = false;
    private string newMessageContent = "";
    private int CurrentUserId => userId; // readonly alias
    private Dictionary<int, FoundUserDTO> companions = new();
    private int? messageIdPendingDelete = null;
    private int? messageIdPendingEdit = null;
    private string updatedMessageContent = "";  // Временное хранилище текста
    private ElementReference messageListRef;
    private bool shouldScrollToBottom = false;
    private bool isLogoutPending = false;


    protected override async Task OnInitializedAsync()
    {
        try
        {   
            // получение текущего пользователя
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity == null || !user.Identity.IsAuthenticated)
            {
                Navigation.NavigateTo("/");
                return;
            }

            // проверка, что пользователь вошел в систему
            var userIdClaim = user.FindFirst("sub") ?? user.FindFirst(ClaimTypes.NameIdentifier);
            if (userIdClaim == null)
            {
                Navigation.NavigateTo("/");
                return;
            }

            // получение айди пользователя из токена
            userId = int.Parse(userIdClaim.Value);

            // загрузка чатов и текущего пользователя
            chats = await MessageService.GetUserChatsAsync(userId);
            currentUser = await UserService.GetUserByIdAsync(userId);

            if (chats != null)
            {
                foreach (var chat in chats)
                {
                    int companionId = chat.User1Id == userId ? chat.User2Id : chat.User1Id;

                    if (!companions.ContainsKey(companionId))
                    {
                        var companionUser = await UserService.GetUserByIdAsync(companionId);
                        if (companionUser != null)
                            companions[companionId] = companionUser;
                    }
                }
            }
        } 
        // обработка ошибок
        catch (Exception ex)
        {
            Console.WriteLine($"[Init error] {ex.Message}");
        }
    }

    private async Task SelectChat(int chatId)
    {
        Console.WriteLine($"Selected chat: {chatId}");
        // 
        selectedChatId = chatId;
        // очищение старых соо перед загрузкой новых, иначе будут висеть предыдущие
        messages = null;
        // await нужен, чтобы дождаться завершения асинхронной операции и получить её результат — список сообщений
        messages = await MessageService.GetMessagesByChatAsync(chatId);
        shouldScrollToBottom = true;

    }
    private async Task SearchUser()
    {
        // трим удаляет пробелы
        foundUser = await UserService.GetUserByQueryAsync(searchTag.Trim());
        // если оба условия выполнены, кнопка создания чата активируется
        canCreate = foundUser != null && foundUser.Id != userId;
    }
    private async Task CreateChatWithFoundUser()
    {
        if (foundUser == null) return;

        var chatDto = new CreateChatDTO
    {
        User1Id = userId,
        User2Id = foundUser.Id,
            // Name = foundUser.Username
    };

        var success = await MessageService.CreateChatAsync(chatDto);

        if (success)
        {
            chats = await MessageService.GetUserChatsAsync(userId); // обновляем список чатов
            selectedChatId = chatDto.User2Id; // выбираем новый чат 
            messages = await MessageService.GetMessagesByChatAsync(selectedChatId.Value); // загружаем сообщения
            shouldScrollToBottom = true;
            // очищаем все временное
            searchTag = "";
            foundUser = null;
            canCreate = false;
        }
    }
    // 
    private string GetChatDisplayName(ChatDTO chat)
    {
        int companionId = chat.User1Id == userId ? chat.User2Id : chat.User1Id;

        return companions.TryGetValue(companionId, out var user)
            ? user.Username
            : $"Chat #{chat.Id}";
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessageContent) || selectedChatId == null)
        {
            return;
        }

        var message = new SendMessageDTO
            {
                ChatId = selectedChatId.Value,
                SenderId = userId,
                ReceiverId = chats
                        .FirstOrDefault(c => c.Id == selectedChatId)?.User1Id == userId
                        ? chats.First(c => c.Id == selectedChatId).User2Id
                        : chats.First(c => c.Id == selectedChatId).User1Id,
                Content = newMessageContent
            };

        var success = await MessageService.SendMessageAsync(message);
        if (success)
        {
            messages = await MessageService.GetMessagesByChatAsync(selectedChatId.Value);
            shouldScrollToBottom = true;
            newMessageContent = "";
        }
    }

    private async Task DeleteMessage(int messageId)
    {
        var success = await MessageService.DeleteMessageAsync(messageId);

        if (success && selectedChatId.HasValue)
        {
            messages = await MessageService.GetMessagesByChatAsync(selectedChatId.Value);
            shouldScrollToBottom = true;

        }
    }

    private FoundUserDTO? GetChatCompanion(ChatDTO chat)
    {
        int companionId = chat.User1Id == userId ? chat.User2Id : chat.User1Id;
        return companions.TryGetValue(companionId, out var user) ? user : null;
    }

    private ChatDTO? GetSelectedChat()
    {
        return chats?.FirstOrDefault(c => c.Id == selectedChatId);
    }
    private void AskDelete(int id)
    {
        messageIdPendingDelete = id;
    }
    private async Task ConfirmDelete (int id)
    {
        await DeleteMessage(id);
        messageIdPendingDelete = null;
    }
    private void CancelDelete()
    {
        messageIdPendingDelete = null;
    }
    private void StartUpdate(int id, string content)
    {
        messageIdPendingEdit = id;
        updatedMessageContent = content;
    }
    private void CancelUpdate()
    {
        messageIdPendingEdit = null;
        updatedMessageContent = "";
    }
    private async Task ConfirmUpdate(int id)
    {
        if (string.IsNullOrWhiteSpace(updatedMessageContent))
        {
            return;
        }

        var updateDto = new UpdateMessageDto
        {
                Content = updatedMessageContent
        };

        var success = await MessageService.UpdateMessageAsync(id, updateDto);

        if (success && selectedChatId.HasValue)
        {
            messages = await MessageService.GetMessagesByChatAsync(selectedChatId.Value);
            shouldScrollToBottom = true;
            messageIdPendingEdit = null;
            updatedMessageContent = "";
        }
    }
    private async Task ScrollToBottomAsync()
    {
        await InvokeAsync(async () =>
        {
            await JSRuntime.InvokeVoidAsync("scrollToBottom", messageListRef);
        });
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldScrollToBottom)
        {
            shouldScrollToBottom = false;
            await ScrollToBottomAsync();
        }
    }
    private async Task ConfirmLogout()
    {
        isLogoutPending = false;
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "authToken");
        Navigation.NavigateTo("/");
    }
}